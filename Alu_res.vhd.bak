library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;


entity regFile is
generic(num_reg: integer := 32);
	port(
		rst : in std_logic;
		write_regFile : in std_logic;		-- control signal for writing into RF  , if 0  read value from  reg_num register
		reg_num1 : in integer; -- Register to write/read value 
		reg_num2 : in integer;
		read_1 : in integer;
		read_2 : in integer;
		read_3 : in integer;
		read_4 : in integer;
		write_val : in std_logic_vector(15 downto 0); -- Value to be written
	
		create_reg_map : in std_logic; -- if 1 => search for free phy_regs, create a reg_map from reg_num and return mapped reg number
		free_reg : in std_logic; -- if 1=> free reg and clear maps  also commits the reg value to its arch register
		reg_val_1 : out std_logic_vector(15 downto 0); -- value read from reg_num
		reg_val_2 : out std_logic_vector(15 downto 0);
		reg_val_3 : out std_logic_vector(15 downto 0);
		reg_val_4 : out std_logic_vector(15 downto 0);
		mapped_reg1 : out integer; -- mapped address
		mapped_reg2 : out integer;
		reg_mapout :out std_logic_vector(119 downto 0);--for renaming
		reg_latest : out std_logic_vector(39 downto 0)
	);

end entity;

--

architecture arcRF of regFile is
